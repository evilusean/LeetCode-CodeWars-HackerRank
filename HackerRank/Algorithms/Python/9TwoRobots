"""
You have a warehouse with M containers filled with an infinite number of candies. The containers are arranged in a single row, equally spaced to be 1 meter 
apart. You also have 2 robots that can pick up 1 piece of candy and transport it between any two containers.

The robots take instructions in the form of queries consisting of two integers, Ma and Mb, respectively. To execute a query, a robot travels to container M1,
picks up 1 candy, transports it to container Mb, and then stops at Mb until it receives another query.

Calculate the minimum total distance the robots must travel to execute N queries in order.

Note: You choose which robot executes each query.

Input Format

The first line contains a single integer,  (the number of test cases); each of the  test cases is described over  lines.

The first line of a test case has two space-separated integers,  (the number of containers) and  (the number of queries).
The  subsequent lines each contain two space-separated integers,  and , respectively; each line  describes the  query.

Constraints

Output Format

On a new line for each test case, print an integer denoting the minimum total distance that the robots must travel to execute the queries in order.

Sample Input

3
5 4
1 5
3 2
4 1
2 4
4 2
1 2
4 3
10 3
2 4
5 4
9 8
Sample Output

11
2
5
Explanation

In this explanation, we refer to the two robots as R1 and R2, each container i as Mi, and the total distance traveled for each query j as Dj.

Note: For the first query a robot executes, there is no travel distance. For each subsequent query that robot executes, it must travel from the location where it completed its last query.

Test Case 0:
The minimum distance traveled is :

Robot: R1
M1 -> M5
D0 = | 1 -5 | = 4 meters.
Robot: 

 meter.
Robot: R2
M3 -> M2
D1 = | 3 - 2 | = 1 meter.
Robot: R1
M5 -> M4 -> M1
D2 = | 5-4 | + | 4-1 | = 1+3=4 meters.
Sum the distances traveled () and print the result on a new line.
Given Code:
#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'twoRobots' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER m
#  2. 2D_INTEGER_ARRAY queries
#

def twoRobots(m, queries):
    # Write your code here

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    first_multiple_input = input().rstrip().split()

    m = int(first_multiple_input[0])

    n = int(first_multiple_input[1])

    queries = []

    for _ in range(n):
        queries.append(list(map(int, input().rstrip().split())))

    result = twoRobots(m, queries)

    fptr.write(str(result) + '\n')

    fptr.close()
"""
